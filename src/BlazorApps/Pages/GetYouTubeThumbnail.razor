@page "/get-youtube-thumbnail"

@using Microsoft.JSInterop

<PageTitle>YouTube Thumbnail Extractor</PageTitle>

<div class="container mt-5">
    <h1 class="text-center mb-4">YouTube Thumbnail Extractor</h1>
    <div class="row justify-content-center">
        <div class="col-md-8">
            <form>
                <div class="mb-3">
                    <label for="youtubeUrl" class="form-label">Enter YouTube URL:</label>
                    <input type="url" class="form-control" @bind="YouTubeUrl" @bind:event="oninput" required placeholder="https://www.youtube.com/watch?v=...">
                </div>
                <button type="submit" class="btn btn-primary" @onclick="ExtractThumbnails" @onclick:preventDefault="true">Extract Thumbnail</button>
            </form>
            @if (ThumbnailUrls != null && ThumbnailUrls.Any())
            {
                <div class="mt-4 text-center">
                    <h3>Extracted Thumbnail:</h3>
                    @foreach (var thumbnail in ThumbnailUrls)
                    {
                        <figure>
                            <img src="@thumbnail" alt="YouTube Thumbnail" class="img-fluid mt-2 rounded shadow">
                            <figcaption>
                                <a href="@thumbnail" target="_blank">@thumbnail</a>
                            </figcaption>
                        </figure>
                        <div class="mt-3">
                            <button class="btn btn-primary" @onclick="(() => CopyToClipboard(thumbnail))">Copy URL</button>
                            <a href="@thumbnail" download="youtube_thumbnail.jpg" class="btn btn-success" target="_blank">Download</a>
                        </div>
                        <hr />
                    }
                </div>
            }
            
            <div class="mt-4 alert alert-danger" style="display: none;"></div>
        </div>
    </div>
</div>

@code {
    private string YouTubeUrl { get; set; } = string.Empty;
    private List<string> ThumbnailUrls { get; set; } = new();

    private async Task ExtractThumbnails()
    {
        ThumbnailUrls.Clear();

        try
        {
            var videoId = ExtractVideoId(YouTubeUrl);
            if (!string.IsNullOrEmpty(videoId))
            {
                ThumbnailUrls = new List<string>
                {
                    $"https://img.youtube.com/vi/{videoId}/maxresdefault.jpg",
                    $"https://img.youtube.com/vi/{videoId}/mqdefault.jpg",
                    $"https://img.youtube.com/vi/{videoId}/sddefault.jpg",
                    $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg",
                    $"https://img.youtube.com/vi/{videoId}/default.jpg",
                };
            }
        }
        catch
        {
            // Handle invalid URL
        }

        await Task.CompletedTask;
    }

    private string ExtractVideoId(string url)
    {
        if (Uri.TryCreate(url, UriKind.Absolute, out var uri))
        {
            if (uri.Host == "www.youtube.com" || uri.Host == "youtube.com")
            {
                var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                return query.Get("v") ?? string.Empty;
            }
            else if (uri.Host == "youtu.be")
            {
                return uri.AbsolutePath.TrimStart('/');
            }
        }
        return string.Empty;
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
}
