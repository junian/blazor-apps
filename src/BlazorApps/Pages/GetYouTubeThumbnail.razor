@page "/get-youtube-thumbnail"

@using Microsoft.JSInterop
@using System.Text.RegularExpressions

@inject NavigationManager NavManager

@*
<meta itemprop="name" Content="How to Call ChatGPT with the Google Voice App">
<meta itemprop="description" Content="A simple guide on how to call ChatGPT for free using Google Voice.">
<meta itemprop="datePublished" Content="2024-12-22T10:59:46+07:00">
<meta itemprop="dateModified" Content="2024-12-23T11:15:28+07:00">
<meta itemprop="wordCount" Content="67">
<meta itemprop="image" Content="https://i.ytimg.com/vi/f0Gxo8OLLVU/maxresdefault.jpg">
<meta itemprop="image" Content="https://i.ytimg.com/vi/f0Gxo8OLLVU/mqdefault.jpg">
<meta itemprop="keywords" Content="chatgpt">
*@

<Meta Property="og:url" Content="@NavManager.Uri.ToString()" />
<Meta Property="og:site_name" Content="Junian.Dev" />
<Meta Property="og:title" Content="@PageTitle" />
<Meta Property="og:description" Content="@PageDescription" />
<Meta Property="og:locale" Content="en" />
<Meta Property="og:type" Content="article" />
<Meta Property="article:section" Content="tech" />
<Meta Property="article:published_time" Content="2024-12-22T10:59:46+07:00" />
<Meta Property="article:modified_time" Content="2024-12-23T11:15:28+07:00" />
<Meta Property="article:tag" Content="blazor" />
<Meta Property="og:image" Content="@PageImage" />

<Meta Name="twitter:card" Content="summary_large_image" />
<Meta Name="twitter:image" Content="@PageImage" />
<Meta Name="twitter:title" Content="@PageTitle" />
<Meta Name="twitter:description" Content="@PageDescription" />

<PageTitle>@PageTitle</PageTitle>

<div class="container mt-5">
    <h1 class="text-center mb-4">@PageTitle</h1>
    <div class="row justify-content-center">
        <div class="col-md-8">
            <form>
                <div class="mb-3">
                    <label for="youtubeUrl" class="form-label">Enter YouTube URL:</label>
                    <input type="url" class="form-control" @bind="YouTubeUrl" @bind:event="oninput" required placeholder="https://www.youtube.com/watch?v=...">
                </div>
                <button type="submit" class="btn btn-primary" @onclick="ExtractThumbnails" @onclick:preventDefault="true">Extract Thumbnail</button>
            </form>
            @if (ThumbnailUrls != null && ThumbnailUrls.Any())
            {
                <div class="mt-4 text-center">
                    <h3>Extracted Thumbnail:</h3>
                    @foreach (var thumbnail in ThumbnailUrls)
                    {
                        <figure>
                            <img src="@thumbnail" alt="YouTube Thumbnail" class="img-fluid mt-2 rounded shadow">
                            <figcaption>
                                <a href="@thumbnail" target="_blank">@thumbnail</a>
                            </figcaption>
                        </figure>
                        <div class="mt-3">
                            <button class="btn btn-primary" @onclick="(() => CopyToClipboard(thumbnail))">Copy URL</button>
                            <a href="@thumbnail" download="youtube_thumbnail.jpg" class="btn btn-success" target="_blank">Download</a>
                        </div>
                        <hr />
                    }
                </div>
            }
            
            @if(!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="mt-4 alert alert-danger">@errorMessage</div>
            }
        </div>
    </div>
</div>

@code {

    private string PageTitle = "YouTube Thumbnail Extractor";
    private string PageDescription = "A simple YouTube Thumnnail extractor written in C# and Blazor.";
    private string PageImage = "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi5qWF0Fn7CL8swGGaD81PU-JO9RxcsOgA9A84vvvHZ3H2zHhWv7nXS8kshaIIcyjlhRWxkD7VRbgGI8o7GuOkUtlpHsYiTok68rE7Q6k1R7gxPodviZvgdQNrbMY8jf0tmQj27c3-wbLhtXckfagvfvtUn6EOaFuMAg7XhaiKeRa3cIo2a4XkB2aduj-dW/s1600/youtube-thumbnail-extactor.jpg";
    const string ThumbnailNotFoundErrorMessage = "Invalid YouTube URL. Please try again.";
    private string errorMessage = string.Empty;
    private string YouTubeUrl { get; set; } = string.Empty;
    private List<string> ThumbnailUrls { get; set; } = new();

    private async Task ExtractThumbnails()
    {
        errorMessage = string.Empty;
        ThumbnailUrls.Clear();

        try
        {
            var videoId = ExtractVideoIdRegex(YouTubeUrl);
            if (!string.IsNullOrEmpty(videoId))
            {
                ThumbnailUrls = new List<string>
                {
                    $"https://img.youtube.com/vi/{videoId}/maxresdefault.jpg",
                    $"https://img.youtube.com/vi/{videoId}/mqdefault.jpg",
                    $"https://img.youtube.com/vi/{videoId}/sddefault.jpg",
                    $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg",
                    $"https://img.youtube.com/vi/{videoId}/default.jpg",
                };
            }
            else
            {
                errorMessage = ThumbnailNotFoundErrorMessage;
            }
        }
        catch
        {
            errorMessage = ThumbnailNotFoundErrorMessage;
        }

        await Task.CompletedTask;
    }

    private string ExtractVideoId(string url)
    {
        if (Uri.TryCreate(url, UriKind.Absolute, out var uri))
        {
            if (uri.Host == "www.youtube.com" || uri.Host == "youtube.com")
            {
                var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                return query.Get("v") ?? string.Empty;
            }
            else if (uri.Host == "youtu.be")
            {
                return uri.AbsolutePath.TrimStart('/');
            }
        }
        return string.Empty;
    }

    private string ExtractVideoIdRegex(string url)
    {
        if (string.IsNullOrWhiteSpace(url)) 
            return string.Empty;

        var regExp = new Regex(@"^.*((youtu\.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*");
        var match = regExp.Match(url);

        return (match.Success && match.Groups[7].Value.Length == 11) 
            ? match.Groups[7].Value 
            : string.Empty;
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
}
