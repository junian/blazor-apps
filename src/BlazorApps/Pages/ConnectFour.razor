@page "/connect-four"
@using BlazorApps.States
@using System.Drawing
@inject ConnectFourGameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<PageTitle>Connect 4 Game</PageTitle>

<h1>Connect 4 Game</h1>

<article>
    @winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset Game </button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>
<nav>
    @for(byte i=0;i<7;i++)
    {
        var col =i;
        <span title="Click to Player a piece" @onclick="() => PlayPiece(col)">▼</span>
    }
</nav>
<div>
   <div class="board">
      @for (var i = 0; i < 42; i++)
      {
         <span class="container">
            <span></span>
         </span>
      }
      @for(var i=0;i<42;i++)
      {
        <span class="@pieces[i]"></span>
      }
   </div>
</div>

@code {

    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty)
        ? $"Player {State.PlayerTurn}'s Turn"
        : string.Empty;
    private string ResetStyle => (winnerMessage == string.Empty)
        ? $"display: none;"
        : string.Empty;
    
    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }

        winnerMessage = State.CheckForWin() switch
        {
            ConnectFourGameState.WinState.Player1_Wins => "Player 1 Wins!",
            ConnectFourGameState.WinState.Player2_Wins => "Player 2 Wins!",
            ConnectFourGameState.WinState.Tie => "It's a tie!",
            _ => "",
        };
    }

    private void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    [Parameter]
    public Color BoardColor{get;set;} = ColorTranslator.FromHtml("yellow");
    [Parameter]
    public Color Player1Color {get;set;} = ColorTranslator.FromHtml("red");
    [Parameter]
    public Color Player2Color{get;set;} = ColorTranslator.FromHtml("blue");

    protected override Task OnInitializedAsync()
    {
        State.ResetBoard();
        return Task.CompletedTask;
    }
}
